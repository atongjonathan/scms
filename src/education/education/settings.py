"""
Django settings for education project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-exu_a3ll@)1+@wr6+l9-6xj$m1#tew3r76a=czftfe0_0s0b_6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'constance',
    'storages',
    'authentication',
    'app'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'education.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'constance.context_processors.config'
            ],
        },
    },
]

WSGI_APPLICATION = 'education.wsgi.application'

# Logging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "Education | {asctime} | {levelname} | {module} | {lineno} | {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": os.getenv('LOGGING_CONSOLE_LEVEL', "INFO"),
            "class": "logging.StreamHandler",
            "formatter": "simple"
        },
        "file": {
            "level": os.getenv('LOGGING_FILE_LEVEL', "INFO"),
            "class": "logging.FileHandler",
            "filename": "ScMS.log",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "CRITICAL",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
            "email_backend": "django.core.mail.backends.smtp.EmailBackend",
        },
    },
    "root": {
        "handlers": ["console", "file", "mail_admins"],
        "level": os.getenv('LOGGING_ROOT_LEVEL', "INFO")
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file", "mail_admins"],
            "level": os.getenv("LOGGING_DJANGO_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("PG_NAME", "education"),
        "USER": os.getenv("PG_USER", "postgres"),
        "PASSWORD": os.getenv("PG_PASS", "postgres"),
        "HOST": os.getenv("PG_HOST", "localhost"),
        "PORT": os.getenv("PG_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-KE'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'authentication.EUser'

LOGIN_URL = "/auth/login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/auth/logout"

ADMINS = [("Jona", "atongjonathan@gmail.com")]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_EMAIL_FROM', "")
EMAIL_BCC = os.environ.get('DEFAULT_EMAIL_BCC', "")

EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', "")
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', "")
EMAIL_PORT = os.environ.get('EMAIL_PORT', 587)
EMAIL_SUBJECT_PREFIX = "ScMS"
EMAIL_USE_LOCALTIME = True
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', True)
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', False)
SERVER_EMAIL = os.environ.get('DEFAULT_EMAIL_FROM', "")
if EMAIL_HOST == "smtp.gmail.com":
    EMAIL_HOST_PASSWORD += "\n"


# Cloudflare R2 Settings
AWS_ACCESS_KEY_ID = os.getenv("R2_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("R2_SECRET_ACCESS_KEY")
R2_BUCKET_NAME = os.getenv("R2_BUCKET_NAME")
R2_ACCOUNT_ID = os.getenv("R2_ACCOUNT_ID")

# Endpoint
AWS_S3_ENDPOINT_URL = f"https://{R2_ACCOUNT_ID}.r2.cloudflarestorage.com"

# Make uploaded files public (optional)
AWS_DEFAULT_ACL = "public-read"

# If you want MEDIA_URL to be R2 URL:

AWS_S3_CUSTOM_DOMAIN = os.getenv("AWS_S3_CUSTOM_DOMAIN")


# Constance settings
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

CONSTANCE_DATABASE_PREFIX = 'constance:education:'
CONSTANCE_IGNORE_ADMIN_VERSION_CHECK = True


CONSTANCE_CONFIG = {

    'logo': ('', 'Site logo', 'logo_field'),
    'name': ('ScMS', 'Site name', 'required_char')
}

CONSTANCE_ADDITIONAL_FIELDS = {
    'logo_field': ['django.forms.ImageField'],
    'required_char': ('django.forms.CharField', {'required': True}),

}

MEDIA_URL = "/media/"

FILE_ROOT = MEDIA_URL

MEDIA_ROOT = BASE_DIR / "media"
